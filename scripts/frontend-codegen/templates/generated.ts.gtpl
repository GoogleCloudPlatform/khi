// This file is generated by scripts/frontend-codegen; DO NOT EDIT.

// Parent relationship

/**
 * ParentRelationship type represents how the timeline relates its parent timeline.
 */
export enum ParentRelationship {
    {{range $key,$value := .ParentRelationships}}{{$value.EnumKeyName}} = {{$key}},
    {{end}}
    Unknown = -1
}

export interface ParentRelationshipMetadataType{
  visible: boolean
  label: string
  hint: string
}

export const ParentRelationshipMetadata: ParentRelationshipMetadataType[] = [
    {{range $key,$value := .ParentRelationships}}
    {
        visible: {{$value.Visible}},
        label: "{{$value.Label}}",
        hint: "{{$value.Hint}}"
    },
    {{end}}
];

export function ParentRelationshipToLabel(rel: ParentRelationship):string{
    return ParentRelationshipMetadata[rel].label
}

export function ParseParentRelationshipLabel(label: string): ParentRelationship{
    switch(label){
{{range $key,$value := .ParentRelationships}}
        case "{{$value.Label}}":
            return ParentRelationship.{{$value.EnumKeyName}};{{end}}
        default:
            return ParentRelationship.Unknown
    }
}

export enum RevisionVerb{
    {{range $key,$value := .Verbs}}{{$value.EnumKeyName}} = {{$key}},
    {{end}}
}

export interface RevisionVerbMetadataType{
    label: string;
    selector: string;
}

export const RevisionVerbMetadata: RevisionVerbMetadataType[] = [
    {{range $key,$value := .Verbs}}
    {
        label: "{{$value.Label}}",
        selector: "{{$value.CSSSelector}}"
    },{{end}}
];


// log types
export enum LogType{
    {{range $key,$value := .LogTypes}}{{$value.EnumKeyName}} = {{$key}},
    {{end}}
}

export interface LogTypeMetadataType{
    label: string;
}

export const LogTypeMetadata: LogTypeMetadataType[] = [
    {{range $key,$value := .LogTypes}}
    {
        label: "{{$value.Label}}",
    },{{end}}
];

export const logTypes = [
    {{range $key,$value := .LogTypes}}"{{$value.Label}}",
    {{end}}
];

export const logTypeColors:{[logType:string]:string} = {
    {{range $key,$value := .LogTypes}}"{{$value.Label}}":"{{$value.LabelBackgroundColor}}",
    {{end}}
};

export const logTypeDarkColors:{[logType:string]:string} = {
    {{range $key,$value := .LogTypeDarkColors}}"{{$key}}":"{{$value}}",
    {{end}}
};

export enum RevisionState{
    {{range $key,$value := .RevisionStates}}{{$value.EnumKeyName}} = {{$key}},
    {{end}}
}

export interface RevisionStateMetadataType{
    cssSelector: string;
    label: string;
}

export const RevisionStateMetadata: RevisionStateMetadataType[] = [
    {{range $key,$value := .RevisionStates}}
    {
        cssSelector: "{{$value.CSSSelector}}",
        label: "{{$value.Label}}",
    },
    {{end}}
];

export const revisionStates = [
    {{range $key,$value := .RevisionStates}}"{{$value.CSSSelector}}",
    {{end}}
];

export const revisionStatecolors:{[state:string]:string} = {
    {{range $key,$value := .RevisionStates}}"{{$value.CSSSelector}}":"{{$value.BackgroundColor}}",
    {{end}}
};

export const revisionStateDarkColors:{[state:string]:string} = {
    {{range $key,$value := .RevisionStateDarkColors}}"{{$key}}":"{{$value}}",
    {{end}}
};

export const revisionStateToIndex: { [state: string]: number } = {};
for (let i = 0; i < revisionStates.length; i++) {
    revisionStateToIndex[revisionStates[i]] = i;
}

// severities

/**
 * Severity represents severity of a log.
 */
export enum Severity {
    {{range $key,$value := .Severities}}{{$value.EnumKeyName}} = {{$key}},
    {{end}}
}

export interface SeverityMetadataType {
    label: string;
}

export const SeverityMetadata: SeverityMetadataType[] = [
    {{range $key,$value := .Severities}}
    {
        label: "{{$value.Label}}",
    },{{end}}
];

export const severities = [
    {{range $key,$value := .Severities}}"{{$value.Label}}",
    {{end}}
];

export const severityColors:{[state:string]:string} = {
    {{range $key,$value := .Severities}}"{{$value.Label}}":"{{$value.BackgroundColor}}",
    {{end}}
};

export const severityBorderColors:{[state:string]:string} = {
    {{range $key,$value := .Severities}}"{{$value.Label}}":"{{$value.BorderColor}}",
    {{end}}
};

export const severityToIndex: { [state: string]: number } = {};
for (let i = 0; i < severities.length; i++) {
    severityToIndex[severities[i]] = i;
}
